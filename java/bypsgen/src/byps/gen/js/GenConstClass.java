package byps.gen.js;
/* USE THIS FILE ACCORDING TO THE COPYRIGHT RULES IN LICENSE.TXT WHICH IS PART OF THE SOURCE CODE PACKAGE */
import java.io.IOException;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import byps.BException;
import byps.BJsonObject;
import byps.gen.api.ErrorInfo;
import byps.gen.api.GeneratorException;
import byps.gen.api.MemberInfo;
import byps.gen.api.SerialInfo;
import byps.gen.api.TypeInfo;
import byps.gen.utils.CodePrinter;

class GenConstClass {
	
	static Logger log = LoggerFactory.getLogger(GenConstClass.class);
	
	static void generate(CustomControl fact, PrintContext pctxt, SerialInfo serInfo) throws IOException {
		log.debug("generate(" + serInfo);
    
		if (!serInfo.isEnum && pctxt.isSuppressConstantClassesAndObjects()) {
      //  
    }
    else if (serInfo.isCollectionType()) {
			// No API class for List<>...
		}
		else if (serInfo.isArrayType()) {
			// No API class for int[]...
		}
		else if (serInfo.isStubType()) {
			// Stub API class is generated by GenRemoteStub
		}
		else if (serInfo.typeId < pctxt.classDB.getRegistry().getMinTypeIdUser()){
			// No API class for RemoteException ...
		}
		else if (serInfo.isResultClass() || serInfo.isRequestClass()) {
			// JSON API does not need a class for results or requests 
		}
		else  {
			log.info("Generate API class for type " + serInfo.typeId + ": " + serInfo);
			CodePrinter pr = pctxt.getPrinter();
			fact.createGenConstClass(pctxt, serInfo, pr).generate();
			pr.close();
		}
		log.debug(")generate");
	}
	
	protected GenConstClass(PrintContext pctxt, SerialInfo serInfo, CodePrinter pr) {
		this.pctxt = pctxt;
		this.serInfo = serInfo;
		this.pr = pr;
	}
	
	private void printMember(MemberInfo minfo) throws IOException {
		log.debug("printMember");
		
		pctxt.printComments(pr, minfo.comments);

		// BYPS-93: Use shared value printer for javascript and typescript
		JSConstValuePrinter printer = new JSConstValuePrinter(pctxt);

		String value = minfo.value;
		if (value != null) {
			if (value.startsWith("\"")) value = value.substring(1, value.length()-1);
			String cvalue = printer.printConstValue(minfo.type, value);
			pr.print("this.").print(minfo.name).print(" = ").print(cvalue).println(";");
		}
		else {
			pr.print("// ").print(minfo.name).print(" // ").print(minfo.type.toString(serInfo.pack)).println();
		}
		
		log.debug(")printMember");
	}
	
	private void generate() throws IOException {
		if (serInfo.isEnum){
			generateEnum();
		}
		else {
			generateClass();
		}
	}
	
	private ArrayList<MemberInfo> sortEnumMembersByOrdinal(List<MemberInfo> members) {
		ArrayList<MemberInfo> m = new ArrayList<MemberInfo>(members);

		Collections.sort(m, new Comparator<MemberInfo>() {
			@Override
			public int compare(MemberInfo o1, MemberInfo o2) {
				int v1 = Integer.parseInt(o1.value);
				int v2 = Integer.parseInt(o2.value);
				return v1 - v2;
			}
		});
		
		return m;
	}
	
	private void generateEnum() throws IOException {
		log.debug("generateEnum(");
		pr.print(serInfo.pack).print(".").print(serInfo.name).println(" = {");
		pr.beginBlock();
		
		ArrayList<MemberInfo> membersByOrdinal = sortEnumMembersByOrdinal(serInfo.members);
		for (int i = 0; i < membersByOrdinal.size(); i++) {
			MemberInfo minfo = membersByOrdinal.get(i);
			pctxt.printComments(pr, minfo.comments);
			CodePrinter mpr = pr.print(minfo.name).print(" : ").print(minfo.value);
			boolean lastRow = (i == membersByOrdinal.size()-1); 
			mpr.println(lastRow ? "" : ",");
		}
		
		pr.endBlock();
		pr.println("};");
		pr.println();
		log.debug(")generateEnum");
	}
	
	private void generateClassForConstants(ArrayList<MemberInfo> members, String classSuffix) throws IOException {
		log.debug("generateClassForConstants(");

		String className = serInfo.pack + "." + serInfo.name + classSuffix;
		
		pr.print(className).println("_Type = function() {");
		pr.beginBlock();

		for (MemberInfo minfo : serInfo.members) {
			printMember(minfo);
		}

		pr.endBlock();
		pr.println("};");

		log.debug(")generateClassForConstants");
	}
	
	private void generateClass() throws IOException {
		log.debug("generate");

		// Separate constant members from normal members  
		ArrayList<MemberInfo> valueMembers = new ArrayList<MemberInfo>();
		ArrayList<MemberInfo> constMembers = new ArrayList<MemberInfo>();
		PrintHelper.collectAllMembers(serInfo, valueMembers, constMembers);

		if (constMembers.size() != 0) {
			generateClassForConstants(constMembers, valueMembers.size() != 0 ? "C" : "");
			pr.println();
		}
		
		log.debug(")generate");
	}

	private final SerialInfo serInfo;
	private final CodePrinter pr;
	private final PrintContext pctxt;
}
